# Makefile.pypi-publisher - Portable PyPI Package Publishing
#
# A standalone Makefile that provides PyPI package publishing functionality
# for any Poetry-based Python project.
#
# FEATURES:
# - Version bumping - Semantic version bumps (patch/minor/major)
# - Git integration - Automatic commits, tagging, and pushing
# - PyPI polling - Wait for package to appear on PyPI after publishing
# - Safety checks - Clean repository validation before operations
# - Interactive UI - Confirmation prompts with release details
# - Dry-run mode - Simulate operations without making changes
# - Error rollback - Automatic recovery from failed operations
# - Workflow validation - Check GitHub Actions publish workflow exists
#
# INSTALLATION:
# 1. Copy Makefile.pypi-publisher to your project's tools/ directory
# 2. Add this line to your main Makefile:
#    -include tools/Makefile.pypi-publisher
# 3. Ensure dependencies are installed (see below)
#
# REQUIREMENTS:
# - Tools: git, curl, jq, sed, poetry
# - GNU Make (standard on most systems; won't work with BSD make)
# - Poetry project: Must have pyproject.toml with package configuration
# - Git repository: Must have GitHub remote origin
# - GitHub Actions: Must have .github/workflows/publish.yml workflow
#
# INSTALLING DEPENDENCIES:
# - macOS: brew install jq poetry
# - Ubuntu/Debian: apt-get install jq && pip install poetry
# - CentOS/RHEL: yum install jq && pip install poetry
# - Alpine: apk add jq && pip install poetry
#
# SETUP:
# Your project needs:
# 1. pyproject.toml with [tool.poetry] section and name/version
# 2. GitHub Actions workflow at .github/workflows/publish.yml
# 3. PyPI API token configured in GitHub repository secrets
#
# COMMANDS:
#   make release-patch        - Bump patch version and publish (1.0.0 → 1.0.1)
#   make release-minor        - Bump minor version and publish (1.0.0 → 1.1.0)
#   make release-major        - Bump major version and publish (1.0.0 → 2.0.0)
#   make release-dry-run-patch - Simulate patch release without changes
#   make release-dry-run-minor - Simulate minor release without changes
#   make release-dry-run-major - Simulate major release without changes
#   make release-help         - Show help information
#
# GITHUB ACTIONS WORKFLOW:
# Your .github/workflows/publish.yml should trigger on tag pushes:
#   on:
#     push:
#       tags: ['v*']
#   jobs:
#     publish:
#       runs-on: ubuntu-latest
#       steps:
#         - uses: actions/checkout@v4
#         - uses: actions/setup-python@v4
#         - name: Install poetry
#           run: pip install poetry
#         - name: Build and publish
#           run: |
#             poetry build
#             poetry publish --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}
#
# HOW IT WORKS:
# 1. Validates repository is clean and all requirements are met
# 2. Shows release details and prompts for confirmation
# 3. Bumps version in pyproject.toml using Poetry
# 4. Updates poetry.lock file
# 5. Commits version bump and creates git tag
# 6. Pushes commit and tag to trigger GitHub Actions
# 7. Polls PyPI API to confirm package publication
# 8. Provides rollback on any failures
#
# PORTABILITY:
# This Makefile is completely self-contained and can be used in any:
# - Python Poetry project with proper configuration
#
# TROUBLESHOOTING:
# - "poetry not found": Install Poetry (see INSTALLING DEPENDENCIES above)
# - "Repository has uncommitted changes": Commit or stash changes first
# - "No publish workflow found": Create .github/workflows/publish.yml
# - "PyPI polling timeout": Check GitHub Actions logs for publishing status
# - "Version already exists": Version may already be published to PyPI
# - Colors not working: Some CI/CD environments don't support ANSI colors
#
# NOTES:
# - The -include directive means make won't error if the file is missing
# - Poetry CLI is required for reliable semantic version management
# - Rollback only affects local git state; published packages cannot be unpublished
# - PyPI has rate limits; allow adequate time between releases
#
# =============================================================================

# Check for required tools
REQUIRED_TOOLS := git curl jq sed poetry
check_tool = $(shell command -v $(1) 2>/dev/null || echo "")
MISSING_TOOLS := $(foreach tool,$(REQUIRED_TOOLS),$(if $(call check_tool,$(tool)),,$(tool)))
ifneq ($(strip $(MISSING_TOOLS)),)
$(error Missing required tools: $(MISSING_TOOLS). Install with: brew install jq poetry (macOS) or apt install jq && pip install poetry (Ubuntu))
endif

# Shell settings
SHELL := /bin/bash
.SHELLFLAGS := -euo pipefail -c

# Color definitions
GREEN := \\033[32m
BRIGHT_GREEN := \\033[1;32m
RED := \\033[31m
BRIGHT_RED := \\033[1;31m
BLUE := \\033[34m
BRIGHT_BLUE := \\033[1;34m
CYAN := \\033[36m
YELLOW := \\033[33m
BRIGHT_YELLOW := \\033[1;33m
GRAY := \\033[90m
BOLD := \\033[1m
RESET := \\033[0m

# PyPI API endpoint
PYPI_API := https://pypi.org/pypi

# =============================================================================
# VALIDATION FUNCTIONS
# =============================================================================

# Check if repository is clean
define check_clean_repo
	@if [ -n "$$(git status --porcelain)" ]; then \
		echo -e "$(RED)Error: Repository has uncommitted changes$(RESET)" >&2; \
		echo "Please commit or stash changes before releasing" >&2; \
		exit 1; \
	fi
endef

# Check if pyproject.toml exists and is valid
define check_pyproject
	@if [ ! -f "pyproject.toml" ]; then \
		echo -e "$(RED)Error: pyproject.toml not found$(RESET)" >&2; \
		echo "This tool requires a Poetry-managed Python project" >&2; \
		exit 1; \
	fi; \
	if ! poetry check >/dev/null 2>&1; then \
		echo -e "$(RED)Error: Invalid pyproject.toml configuration$(RESET)" >&2; \
		echo "Run 'poetry check' to validate your configuration" >&2; \
		exit 1; \
	fi
endef

# Check if publish workflow exists
define check_workflow
	@if [ ! -f ".github/workflows/publish.yml" ]; then \
		echo -e "$(RED)Error: GitHub Actions publish workflow not found$(RESET)" >&2; \
		echo "Expected: .github/workflows/publish.yml" >&2; \
		echo "This workflow should trigger on tag pushes and publish to PyPI" >&2; \
		exit 1; \
	fi
endef

# Get package name from pyproject.toml
define get_package_name
	PACKAGE_NAME=$$(grep '^name = ' pyproject.toml | sed 's/name = //; s/"//g; s/'"'"'//g' | xargs); \
	if [ -z "$$PACKAGE_NAME" ]; then \
		echo -e "$(RED)Error: Could not extract package name from pyproject.toml$(RESET)" >&2; \
		exit 1; \
	fi; \
	echo "$$PACKAGE_NAME"
endef

# Get current version from Poetry
define get_current_version
	poetry version -s
endef

# =============================================================================
# RELEASE TARGETS
# =============================================================================

# Release patch version
.PHONY: release-patch
release-patch:
	@$(MAKE) -s _release BUMP_TYPE=patch DRY_RUN=false

# Release minor version  
.PHONY: release-minor
release-minor:
	@$(MAKE) -s _release BUMP_TYPE=minor DRY_RUN=false

# Release major version
.PHONY: release-major  
release-major:
	@$(MAKE) -s _release BUMP_TYPE=major DRY_RUN=false

# Dry-run patch release
.PHONY: release-dry-run-patch
release-dry-run-patch:
	@$(MAKE) -s _release BUMP_TYPE=patch DRY_RUN=true

# Dry-run minor release
.PHONY: release-dry-run-minor
release-dry-run-minor:
	@$(MAKE) -s _release BUMP_TYPE=minor DRY_RUN=true

# Dry-run major release
.PHONY: release-dry-run-major
release-dry-run-major:
	@$(MAKE) -s _release BUMP_TYPE=major DRY_RUN=true

# Help target
.PHONY: release-help
release-help:
	@echo -e "$(BOLD)PyPI Package Publishing Commands:$(RESET)"
	@echo -e "  $(CYAN)make release-patch$(RESET)        - Bump patch version and publish (1.0.0 → 1.0.1)"
	@echo -e "  $(CYAN)make release-minor$(RESET)        - Bump minor version and publish (1.0.0 → 1.1.0)"
	@echo -e "  $(CYAN)make release-major$(RESET)        - Bump major version and publish (1.0.0 → 2.0.0)"
	@echo -e "  $(CYAN)make release-dry-run-patch$(RESET) - Simulate patch release without changes"
	@echo -e "  $(CYAN)make release-dry-run-minor$(RESET) - Simulate minor release without changes"
	@echo -e "  $(CYAN)make release-dry-run-major$(RESET) - Simulate major release without changes"
	@echo ""
	@echo -e "$(BOLD)Requirements:$(RESET)"
	@echo -e "  - Clean git repository (no uncommitted changes)"
	@echo -e "  - Valid pyproject.toml with Poetry configuration"
	@echo -e "  - GitHub Actions workflow at .github/workflows/publish.yml"
	@echo -e "  - Tools: git, curl, jq, sed, poetry"

# =============================================================================
# INTERNAL IMPLEMENTATION
# =============================================================================

# Internal release implementation
.PHONY: _release
_release:
	@$(call check_clean_repo)
	@$(call check_pyproject)
	@$(call check_workflow)
	@PACKAGE_NAME=$$($(call get_package_name)); \
	CURRENT_VERSION=$$($(call get_current_version)); \
	if [ "$(DRY_RUN)" = "true" ]; then \
		NEW_VERSION="<new-version>"; \
	else \
		NEW_VERSION=$$(poetry version $(BUMP_TYPE) --dry-run | awk '{print $$6}'); \
	fi; \
	COMMIT_HASH=$$(git rev-parse HEAD); \
	echo -e "$(BRIGHT_BLUE)Release Details:$(RESET)"; \
	echo -e "  Package: $(BOLD)$$PACKAGE_NAME$(RESET)"; \
	echo -e "  Current: $(GRAY)$$CURRENT_VERSION$(RESET)"; \
	echo -e "  New:     $(GREEN)$$NEW_VERSION$(RESET)"; \
	echo -e "  Type:    $(CYAN)$(BUMP_TYPE)$(RESET)"; \
	echo -e "  Mode:    $(if $(filter true,$(DRY_RUN)),$(YELLOW)DRY-RUN$(RESET),$(GREEN)LIVE$(RESET))"; \
	echo ""; \
	if [ "$(DRY_RUN)" = "true" ]; then \
		echo -e "$(YELLOW)Actions that would be performed:$(RESET)"; \
		echo -e "  - Bump version in pyproject.toml"; \
		echo -e "  - Update poetry.lock file"; \
		echo -e "  - Commit version changes"; \
		echo -e "  - Create git tag v$$NEW_VERSION"; \
		echo -e "  - Push commit and tag to origin"; \
		echo -e "  - Wait for PyPI publication"; \
	else \
		echo -e "$(BRIGHT_RED)Actions to be performed:$(RESET)"; \
		echo -e "  - Bump version in pyproject.toml"; \
		echo -e "  - Update poetry.lock file"; \
		echo -e "  - Commit version changes"; \
		echo -e "  - Create git tag v$$NEW_VERSION"; \
		echo -e "  - Push commit and tag to origin"; \
		echo -e "  - Wait for PyPI publication"; \
	fi; \
	echo ""; \
	echo -ne "$(BOLD)Proceed? (Y/n): $(RESET)"; \
	read -r RESPONSE; \
	if [ -n "$$RESPONSE" ] && [ "$$(echo "$$RESPONSE" | tr A-Z a-z)" = "n" ]; then \
		echo -e "$(YELLOW)Release cancelled by user$(RESET)"; \
		exit 0; \
	fi; \
	if [ "$(DRY_RUN)" = "true" ]; then \
		echo -e "$(BRIGHT_YELLOW)[DRY-RUN] Simulating release process...$(RESET)"; \
		echo -e "$(BRIGHT_YELLOW)[DRY-RUN] Would bump version to $$NEW_VERSION$(RESET)"; \
		echo -e "$(BRIGHT_YELLOW)[DRY-RUN] Would commit and tag v$$NEW_VERSION$(RESET)"; \
		echo -e "$(BRIGHT_YELLOW)[DRY-RUN] Would push to origin$(RESET)"; \
		echo -e "$(BRIGHT_YELLOW)[DRY-RUN] Would wait for PyPI publication$(RESET)"; \
		echo -e "$(GREEN)✓ Dry-run completed successfully$(RESET)"; \
	else \
		echo -e "$(BRIGHT_BLUE)Executing release...$(RESET)"; \
		trap 'echo -e "$(RED)Release failed, rolling back...$(RESET)"; git checkout pyproject.toml poetry.lock 2>/dev/null || true; git reset --hard '"$$COMMIT_HASH"' 2>/dev/null || true; git tag -d v'"$$NEW_VERSION"' 2>/dev/null || true; exit 1' ERR; \
		echo -e "$(CYAN)Bumping version...$(RESET)"; \
		poetry version $(BUMP_TYPE) >/dev/null; \
		NEW_VERSION=$$($(call get_current_version)); \
		echo -e "$(CYAN)Updating poetry.lock...$(RESET)"; \
		poetry lock --no-update >/dev/null; \
		echo -e "$(CYAN)Committing changes...$(RESET)"; \
		git add pyproject.toml poetry.lock; \
		git commit -m "release $$NEW_VERSION" >/dev/null; \
		echo -e "$(CYAN)Creating tag v$$NEW_VERSION...$(RESET)"; \
		git tag "v$$NEW_VERSION"; \
		echo -e "$(CYAN)Pushing to origin...$(RESET)"; \
		git push origin HEAD >/dev/null; \
		git push origin "v$$NEW_VERSION" >/dev/null; \
		echo -e "$(CYAN)Waiting for PyPI publication...$(RESET)"; \
		$(MAKE) -s _wait_pypi PACKAGE_NAME="$$PACKAGE_NAME" VERSION="$$NEW_VERSION"; \
		echo -e "$(BRIGHT_GREEN)✓ Release $$NEW_VERSION completed successfully!$(RESET)"; \
		REPO_URL=$$(git remote get-url origin | sed 's/\.git$$//' | sed 's|git@github.com:|https://github.com/|'); \
		echo -e "$(GRAY)  Package: https://pypi.org/project/$$PACKAGE_NAME/$$NEW_VERSION/$(RESET)"; \
		echo -e "$(GRAY)  Release: $$REPO_URL/releases/tag/v$$NEW_VERSION$(RESET)"; \
		trap - ERR; \
	fi

# Wait for package to appear on PyPI
.PHONY: _wait_pypi
_wait_pypi:
	@MAX_RETRIES=12; \
	INTERVAL=5; \
	SPINNER="|/-\\"; \
	IDX=0; \
	for i in $$(seq 1 $$MAX_RETRIES); do \
		for j in $$(seq 1 4); do \
			printf "\rChecking PyPI $${SPINNER:$$((IDX % 4)):1}"; \
			IDX=$$((IDX + 1)); \
			sleep $$((INTERVAL / 4)); \
		done; \
		RESPONSE=$$(curl -s "$(PYPI_API)/$(PACKAGE_NAME)/json" 2>/dev/null || echo ""); \
		if [ -n "$$RESPONSE" ]; then \
			LATEST_VERSION=$$(echo "$$RESPONSE" | jq -r '.info.version // empty' 2>/dev/null); \
			if [ "$$LATEST_VERSION" = "$(VERSION)" ]; then \
				printf "\r$(GREEN)✓ Version $(VERSION) published to PyPI!$(RESET)\n"; \
				exit 0; \
			fi; \
		fi; \
	done; \
	printf "\r$(YELLOW)⚠ Timeout waiting for PyPI publication$(RESET)\n"; \
	echo -e "$(GRAY)Check manually: https://pypi.org/project/$(PACKAGE_NAME)/$(RESET)"; \
	REPO_URL=$$(git remote get-url origin | sed 's/\.git$$//' | sed 's|git@github.com:|https://github.com/|'); \
	echo -e "$(GRAY)GitHub Actions: $$REPO_URL/actions$(RESET)"

# Prevent "Nothing to be done" message for arguments
%:
	@: